akka {
  loggers          = [de.heikoseeberger.akkalog4j.Log4jLogger]
  logging-filter   = de.heikoseeberger.akkalog4j.Log4jLoggingFilter
  loglevel         = debug
  log-dead-letters = off
  stdout-loglevel  = debug

  actor {
    allow-java-serialization = off
    provider                 = cluster
  }

  cluster {
    seed-nodes = []
    # Minimum required number of members before the leader changes member status
    # of 'Joining' members to 'Up'. Typically used together with
    # 'Cluster.registerOnMemberUp' to defer some action, such as starting actors,
    # until the cluster has reached a certain size.
    # Set to 2, so that during a rolling deployment at least two nodes are in `Joining` or `Up` status before promoting
    # the new nodes to `Up`.
    min-nr-of-members = 2

    # The joining of given seed nodes will by default be retried indefinitely until
    # a successful join. That process can be aborted if unsuccessful by defining this
    # timeout. When aborted it will run CoordinatedShutdown, which by default will
    # terminate the ActorSystem. CoordinatedShutdown can also be configured to exit
    # the JVM. It is useful to define this timeout if the seed-nodes are assembled
    # dynamically and a restart with new seed-nodes should be tried after unsuccessful
    # attempts.
    # Setting the value to 40 seconds is a recommendation of: https://developer.lightbend.com/docs/akka-management/current/bootstrap.html#recommended-configuration
    # After the shutdown, Kubernetes will restart your node and the operation will (presumably) eventually succeed.
    shutdown-after-unsuccessful-join-seed-nodes = 40s

    downing-provider-class = "tanukki.akka.cluster.autodown.MajorityLeaderAutoDowning"
  }

  # CoordinatedShutdown will run the tasks that are added to these
  # phases. The phases can be ordered as a DAG by defining the
  # dependencies between the phases.
  # Each phase is defined as a named config section with the
  # following optional properties:
  # - timeout=15s: Override the default-phase-timeout for this phase.
  # - recover=off: If the phase fails the shutdown is aborted
  #                and depending phases will not be executed.
  # depends-on=[]: Run the phase after the given phases
  coordinated-shutdown {
    # Exit the JVM (System.exit(0)) in the last phase actor-system-terminate
    # if this is set to 'on'. It is done after termination of the
    # ActorSystem if terminate-actor-system=on, otherwise it is done
    # immediately when the last phase is reached.
    exit-jvm = on

    default-phase-timeout = 10 seconds
  }

  custom-downing {
    stable-after = 40s

    majority-leader-auto-downing {
      majority-member-role = ""
      down-if-in-minority = true
      shutdown-actor-system-on-resolution = true
    }
  }

  management {
    cluster {
      bootstrap {
        // config for dns discovery
        //contact-point-discovery {
        //  service-name = "dac-headless-service"
        //  service-namespace = "default.svc.cluster.local"
        //}
        contact-point {
          fallback-port = ${akka.management.http.port}
        }
        # The smallest number of contact points that need to be discovered before the bootstrap process can start.
        # For optimal safety during cluster formation, you may want to set these value to the number of initial
        # nodes that you know will participate in the cluster (e.g. the value of `spec.replicas` as set in your kubernetes config.
        contact-point-discovery {
          required-contact-point-nr = 2
        }
        # Amount of time for which a discovery observation must remain "stable"
        # (i.e. not change list of discovered contact-points) before a join decision can be made.
        # This is done to decrease the likelyhood of performing decisions on fluctuating observations.
        #
        # This timeout represents a tradeoff between safety and quickness of forming a new cluster.
        stable-margin = 5 seconds
      }
    }
    http {
      port = 8558
    }
  }

  discovery {
    # Kubernetes API is used as discovery method
    # https://developer.lightbend.com/docs/akka-management/current/discovery/index.html#discovery-method-kubernetes-api
    method = kubernetes-api
    //method = akka-dns
  }

  remote {
    log-remote-lifecycle-events = on
    artery {
      //enabled = on
      //transport = tcp
      //canonical.port = 25520
      enabled = off
    }
  }
}

dac {
  api {
    address = 0.0.0.0
    port    = 8080
  }
}
